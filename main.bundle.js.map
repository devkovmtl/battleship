{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack:///./src/Gameboard/gameboard.ts","webpack:///./src/Player/player.ts","webpack:///./src/Ship/ship.ts","webpack:///./src/constants.ts","webpack:///./src/index.ts","webpack:///./src/utils.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/startup"],"sourcesContent":["import { Gameboard, Ship } from '../interface'\r\nimport { createArrayOfArray } from '../utils'\r\n\r\nfunction createGameboard(row: number = 10, col: number = 10): Gameboard {\r\n  if (row <= 0) {\r\n    row = 10\r\n  }\r\n  if (col <= 0) {\r\n    col = 10\r\n  }\r\n\r\n  let grid = createArrayOfArray(row, col)\r\n  let ships: Ship[] = []\r\n\r\n  function canShipBePlaced(\r\n    row: number,\r\n    col: number,\r\n    shipLength: number,\r\n    isHorizontal: boolean\r\n  ): boolean {\r\n    // grab next cell to check if empty\r\n    let nextCellsGrid = []\r\n    if (row < 0) {\r\n      return false\r\n    }\r\n    if (col < 0) {\r\n      return false\r\n    }\r\n    if (row > grid.length - 1) {\r\n      return false\r\n    }\r\n    if (col > grid[0].length - 1) {\r\n      return false\r\n    }\r\n    if (!shipLength || shipLength <= 0) {\r\n      return false\r\n    }\r\n    if (isHorizontal) {\r\n      if (col + (shipLength - 1) > grid.length - 1) {\r\n        return false\r\n      }\r\n      // grab the next cell to see if empty\r\n      for (let i = 0; i < shipLength; i++) {\r\n        nextCellsGrid.push(grid[row][col + i])\r\n      }\r\n    }\r\n    if (!isHorizontal) {\r\n      if (row + (shipLength - 1) > grid[0].length - 1) {\r\n        return false\r\n      }\r\n      // grab the next cell to see if empty\r\n      for (let i = 0; i < shipLength; i++) {\r\n        nextCellsGrid.push(grid[row + i][col])\r\n      }\r\n    }\r\n\r\n    if (!nextCellsGrid.every((nxtCell) => !nxtCell)) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return {\r\n    grid,\r\n    placeShipOnGrid: function (\r\n      row: number,\r\n      col: number,\r\n      ship: Ship,\r\n      isHorizontal: boolean = true\r\n    ) {\r\n      if (row < 0 || row > grid.length - 1) {\r\n        throw new Error('Please provide a valid number to place your ship')\r\n      }\r\n\r\n      if (col < 0 || col > grid.length - 1) {\r\n        throw new Error('Please provide a valid number to place your ship')\r\n      }\r\n\r\n      if (canShipBePlaced(row, col, ship.length, isHorizontal)) {\r\n        if (isHorizontal) {\r\n          for (let i = 0; i < ship.length; i++) {\r\n            grid[row][col + i] = `${ship.name}-${i}`\r\n          }\r\n          ships.push(ship)\r\n          return true\r\n        }\r\n        if (!isHorizontal) {\r\n          for (let i = 0; i < ship.length; i++) {\r\n            grid[row + i][col] = `${ship.name}-${i}`\r\n          }\r\n          ships.push(ship)\r\n          return true\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    receiveAttack: function (row: number, col: number) {\r\n      if (row < 0 || row > grid.length - 1) {\r\n        throw new Error('Please provide a valid number to attack opponent ship')\r\n      }\r\n\r\n      if (col < 0 || col > grid.length - 1) {\r\n        throw new Error('Please provide a valid number to attack opponent ship')\r\n      }\r\n      if (grid[row][col] === undefined) {\r\n        grid[row][col] = 'MISS'\r\n        return false\r\n      } else {\r\n        if (grid[row][col] === 'MISS' || grid[row][col] === 'HIT') {\r\n          return false\r\n        } else {\r\n          // send the hit function to correct ship\r\n          const shipWithIndex = grid[row][col]\r\n          const shipName = shipWithIndex.split('-')[0]\r\n          const shipHitPosition = +shipWithIndex.split('-')[1]\r\n          const ship = ships.find((s) => s.name == shipName)\r\n\r\n          if (ship) {\r\n            ship.hit(shipHitPosition)\r\n            grid[row][col] = 'HIT'\r\n            return true\r\n          }\r\n\r\n          return false\r\n        }\r\n      }\r\n    },\r\n    doesAllShipsHaveSunk: function () {\r\n      return ships.every((sh) => sh.isSunk())\r\n    },\r\n  }\r\n}\r\n\r\nexport default createGameboard\r\n","import { Gameboard, Player } from '../interface'\r\nimport { generateRandomNum } from '../utils'\r\n\r\nfunction createPlayer(name: string): Player {\r\n  let listAttack = {}\r\n\r\n  function generateCpuAttackLocation(max: number) {\r\n    const row = generateRandomNum(max)\r\n    const col = generateRandomNum(max)\r\n    // @ts-ignore\r\n    if (listAttack[`${row}-${col}`]) {\r\n      generateCpuAttackLocation(max)\r\n    }\r\n\r\n    return { row, col }\r\n  }\r\n\r\n  return {\r\n    name,\r\n    listAttack,\r\n    attack: function (row: number, col: number, gameboard: Gameboard) {\r\n      return gameboard.receiveAttack(row, col)\r\n    },\r\n    randomAttack: function (gameboard: Gameboard) {\r\n      const { row, col } = generateCpuAttackLocation(gameboard.grid.length)\r\n      // @ts-ignore\r\n      listAttack[`${row}-${col}`] = true\r\n      return gameboard.receiveAttack(row, col)\r\n    },\r\n  }\r\n}\r\n\r\nexport default createPlayer\r\n","import { Ship } from '../interface'\r\nimport { createArrayOfString } from '../utils'\r\n\r\n// Factory function creating ship\r\nfunction createShip(name: string, length: number): Ship {\r\n  if (!name || !name.trim().length) {\r\n    throw new Error('Name is required')\r\n  }\r\n  if (!length || length <= 0) {\r\n    throw new Error('Length is required and bigger than 0')\r\n  }\r\n\r\n  const ship = {\r\n    name,\r\n    length,\r\n    body: createArrayOfString(length, name.toLocaleLowerCase()),\r\n    hit: function (position: number) {\r\n      if (position < 0 || position > this.body.length - 1) {\r\n        throw new Error(`Enter a position between 0 and ${this.body.length}`)\r\n      }\r\n      this.body[position] = 'HIT'\r\n\r\n      return true\r\n    },\r\n    isSunk: function () {\r\n      return this.body.every((el) => el === 'HIT')\r\n    },\r\n  }\r\n\r\n  return ship\r\n}\r\n\r\nexport default createShip\r\n","// Number of cell per row\r\nexport const CELL_PER_ROW = 10\r\n// Number of row\r\nexport const NBR_ROW = 10\r\n// Number of Ships\r\nexport const NBR_SHIPS = 5\r\n// ships name\r\nexport const SHIPS_NAME = [\r\n  'submarine',\r\n  'destroyer',\r\n  'cruiser',\r\n  'battleship',\r\n  'carrier',\r\n]\r\nexport const BG_SHIP = [\r\n  'bg-green-300',\r\n  'bg-yellow-300',\r\n  'bg-pink-300',\r\n  'bg-purple-300',\r\n  'bg-red-300',\r\n]\r\n","import './index.css'\r\n//@ts-ignore\r\nimport ImageVsBlack from './images/player-versus-player.png'\r\n// @ts-ignore\r\nimport ImageVsWhite from './images/player-versus-player-white.png'\r\nimport {\r\n  CELL_PER_ROW,\r\n  NBR_ROW,\r\n  NBR_SHIPS,\r\n  SHIPS_NAME,\r\n  BG_SHIP,\r\n} from './constants'\r\nimport { generateRandomNum } from './utils'\r\nimport createPlayer from './Player/player'\r\nimport createGameboard from './Gameboard/gameboard'\r\nimport { Gameboard, Player, Ship } from './interface'\r\nimport createShip from './Ship/ship'\r\n\r\nconst playerOneName = document.querySelector('.player-one-name')\r\nconst playerOneLives = document.querySelector('.player-one-lives')\r\nconst playerOneGridContainer = document.querySelector(\r\n  '.player-one-grid-container'\r\n)\r\nconst btnRotate = document.querySelector('.btn-rotate')\r\nconst playerOneShipsContainer = document.querySelector(\r\n  '.player-one-ships-container'\r\n)\r\n\r\nconst whoseTurn = document.querySelector('.player-turn')\r\nconst btnStart = document.querySelector('.btn-start')\r\nconst btnReset = document.querySelector('.btn-reset')\r\n\r\nconst playerTwoName = document.querySelector('.player-two-name')\r\nconst playerTwoLives = document.querySelector('.player-two-lives')\r\nconst enemyGridContainer = document.querySelector('.player-two-grid-container')\r\nconst playerTwoShipsContainer = document.querySelector(\r\n  '.player-two-ships-container'\r\n)\r\n\r\nlet myHtmlGridEl: HTMLElement, enemyHtmlGridEl: HTMLElement\r\n// Orientation of ship\r\nlet isHorizontal = true\r\n// Ship Grab to be dragged by player\r\nlet draggedShip: HTMLElement\r\nlet draggedShipName = ''\r\nlet draggedShipLength = 0\r\n// Store the Cpu ship location\r\nconst cpuShipLocation = {}\r\n\r\n// old player gameboard and ships\r\nlet player1: Player, player2: Player\r\nlet player1Gameboard: Gameboard, player2GameBoard: Gameboard\r\nlet player1Ships: Ship[] = [],\r\n  player2Ships: Ship[] = []\r\n\r\n//\r\nlet isGameOver = false\r\nlet currentPlayer = ''\r\nlet winner: Player\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Load image\r\n  loadImage()\r\n  // @ts-ignore\r\n  whoseTurn?.textContent = 'Loading...'\r\n  // Create the 2 players\r\n  player1 = createPlayer('Player One')\r\n  player2 = createPlayer('Player Two (CPU)')\r\n  // @ts-ignore\r\n  playerOneName?.textContent = player1.name\r\n  currentPlayer = player1.name\r\n  // @ts-ignore\r\n  playerTwoName?.textContent = player2.name\r\n  // Create the two gameboard\r\n  player1Gameboard = createGameboard(NBR_ROW, CELL_PER_ROW)\r\n  player2GameBoard = createGameboard(NBR_ROW, CELL_PER_ROW)\r\n  // create ships\r\n  for (let i = 0; i < SHIPS_NAME.length; i++) {\r\n    const ship = createShip(SHIPS_NAME[i], i + 1)\r\n    player1Ships.push(ship)\r\n  }\r\n  for (let i = 0; i < SHIPS_NAME.length; i++) {\r\n    const ship = createShip(SHIPS_NAME[i], i + 1)\r\n    player2Ships.push(ship)\r\n  }\r\n\r\n  // Build Player One grid\r\n  myHtmlGridEl = createHtmlGrid(NBR_ROW, CELL_PER_ROW, false)\r\n  playerOneGridContainer?.appendChild(myHtmlGridEl)\r\n  // Build Player Two grid\r\n  enemyHtmlGridEl = createHtmlGrid(NBR_ROW, CELL_PER_ROW, true)\r\n  enemyGridContainer?.appendChild(enemyHtmlGridEl)\r\n\r\n  // insert ships to player one container\r\n  for (let i = 0; i < NBR_SHIPS; i++) {\r\n    const ship = createHtmlShip(SHIPS_NAME[i], i + 1, false)\r\n    ship.classList.add(BG_SHIP[i])\r\n    playerOneShipsContainer?.appendChild(ship)\r\n  }\r\n  // insert ships to player two container\r\n  for (let i = 0; i < NBR_SHIPS; i++) {\r\n    const ship = createHtmlShip(SHIPS_NAME[i], i + 1, true)\r\n    ship.classList.add(BG_SHIP[i])\r\n    playerTwoShipsContainer?.appendChild(ship)\r\n  }\r\n\r\n  // Rotate the ship\r\n  btnRotate?.addEventListener('click', rotateShip)\r\n  btnStart?.addEventListener('click', startGame)\r\n  btnReset?.addEventListener('click', resetGame)\r\n  // Event listener to drag the ship\r\n  document\r\n    .querySelectorAll('.my-ship-container')\r\n    .forEach((ship) => ship.addEventListener('dragstart', onShipDragStart))\r\n  // Event listener on player one to allow drop ship\r\n  document.querySelectorAll('.grid-cell-me').forEach((gridCell) => {\r\n    gridCell.addEventListener('drop', onShipDragDrop)\r\n    gridCell.addEventListener('dragover', onShipDragOver)\r\n  })\r\n\r\n  // place Cpu ship\r\n\r\n  document.querySelectorAll('.enemy-ship-container').forEach((ship) => {\r\n    setTimeout(() => placeCpuShip(ship), 1000)\r\n  })\r\n})\r\n\r\nfunction gameOver() {\r\n  // console.log('Player One', player1Gameboard.grid)\r\n  // console.log('Player Two', player2GameBoard.grid)\r\n  alert(`${winner.name} won!!`)\r\n  return\r\n}\r\n\r\nfunction checkForWins() {\r\n  if (player1Gameboard.doesAllShipsHaveSunk()) {\r\n    winner = player1\r\n    return true\r\n  }\r\n\r\n  if (player2GameBoard.doesAllShipsHaveSunk()) {\r\n    winner = player1\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction reduceLife(isEnemy: boolean) {\r\n  let totalP1 = 0\r\n  let totalP2 = 0\r\n\r\n  for (let i = 0; i < player1Ships.length; i++) {\r\n    const element = player1Ships[i]\r\n    if (element.isSunk()) {\r\n      totalP1++\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < player2Ships.length; i++) {\r\n    const element = player2Ships[i]\r\n    if (element.isSunk()) {\r\n      totalP2++\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  playerOneLives?.textContent = `${5 - totalP1}`\r\n  // @ts-ignore\r\n  playerTwoLives?.textContent = `${5 - totalP2}`\r\n}\r\n\r\nfunction revealGridCell(\r\n  row: number,\r\n  col: number,\r\n  gb: Gameboard,\r\n  isEnemy: boolean\r\n): void {\r\n  const cell = gb.grid[row][col]\r\n  let htmlCell: HTMLElement\r\n  // if enemy attack our grid so reveal our grid\r\n  if (isEnemy) {\r\n    // @ts-ignore\r\n    htmlCell = document.querySelector(`#cell-${row}-${col}.grid-cell-me`)\r\n  }\r\n  // if not enemy then attack other grid reveal enemy grid\r\n  if (!isEnemy) {\r\n    // @ts-ignore\r\n    htmlCell = document.querySelector(`#cell-${row}-${col}.grid-cell-enemy`)\r\n  }\r\n\r\n  if (cell === 'HIT') {\r\n    // @ts-ignore\r\n    htmlCell?.textContent = '🔥'\r\n  }\r\n  if (cell === 'MISS') {\r\n    // @ts-ignore\r\n    htmlCell?.textContent = '🌊'\r\n  }\r\n}\r\n\r\nfunction computerPlay() {\r\n  player2.randomAttack(player1Gameboard)\r\n  const cpuListAttack = Object.keys(player2.listAttack)\r\n  const row = +cpuListAttack[cpuListAttack.length - 1].split('-')[0]\r\n  const col = +cpuListAttack[cpuListAttack.length - 1].split('-')[1]\r\n  revealGridCell(row, col, player1Gameboard, true)\r\n  // revealGridCell(row, col, player1Gameboard, false)\r\n  if (checkForWins()) {\r\n    isGameOver = true\r\n  }\r\n  reduceLife(true)\r\n  currentPlayer = player1.name\r\n  playGame()\r\n}\r\n\r\nfunction playerPlay(e: any) {\r\n  // @ts-ignore\r\n  const row = +e.target.id.split('-')[1]\r\n  // @ts-ignore\r\n  const col = +e.target.id.split('-')[2]\r\n  player1.attack(row, col, player2GameBoard)\r\n  revealGridCell(row, col, player2GameBoard, false)\r\n  if (checkForWins()) {\r\n    isGameOver = true\r\n  }\r\n  reduceLife(false)\r\n  // @ts-ignore\r\n  currentPlayer = player2.name\r\n  playGame()\r\n}\r\n\r\nfunction playGame() {\r\n  // console.log('Player One', player1Gameboard.grid)\r\n  // console.log('Player Two', player2GameBoard.grid)\r\n  if (isGameOver) {\r\n    gameOver()\r\n  }\r\n\r\n  if (currentPlayer === player1.name) {\r\n    // console.log(cpuShipLocation)\r\n    // @ts-ignore\r\n    whoseTurn?.textContent = player1.name\r\n    document\r\n      .querySelectorAll('.grid-cell-enemy')\r\n      .forEach((cell) => cell.addEventListener('click', playerPlay))\r\n  }\r\n  if (currentPlayer === player2.name) {\r\n    // @ts-ignore\r\n    whoseTurn?.textContent = player2.name\r\n    computerPlay()\r\n    // setTimeout(computerPlay, 1000)\r\n  }\r\n}\r\n\r\nfunction startGame() {\r\n  if (playerOneShipsContainer?.childNodes.length !== 0) {\r\n    alert('Please place all your ships.')\r\n    return\r\n  }\r\n  // @ts-ignore\r\n  whoseTurn?.textContent = currentPlayer\r\n  // while (player1Ships.length > 0 && player2Ships.length > 0) {}\r\n  playGame()\r\n}\r\n\r\nfunction resetGame() {\r\n  location.reload()\r\n}\r\n\r\nfunction generateCpuLocation(max: number) {\r\n  const row = generateRandomNum(max)\r\n  const col = generateRandomNum(max)\r\n  // @ts-ignore\r\n  if (cpuShipLocation[`${row}-${col}`]) {\r\n    generateCpuLocation(max)\r\n  }\r\n\r\n  return { row, col }\r\n}\r\n\r\nfunction placeCpuShip(ship: any) {\r\n  // const row = generateRandomNum(CELL_PER_ROW)\r\n  // const col = generateRandomNum(NBR_ROW)\r\n  const { row, col } = generateCpuLocation(CELL_PER_ROW)\r\n  const shipLength = ship.childNodes.length\r\n  const shipName = ship.classList[1].split('-')[0]\r\n  const isHorizontal = generateRandomNum(2) === 0 ? true : false\r\n\r\n  const listOfCells = []\r\n\r\n  if (isHorizontal) {\r\n    for (let i = 0; i < shipLength; i++) {\r\n      const cell = document.querySelector(\r\n        `#cell-${row}-${col + i}.grid-cell-enemy`\r\n      )\r\n      listOfCells.push(cell)\r\n    }\r\n\r\n    if (\r\n      checkIfShipCanBePlaced(\r\n        isHorizontal,\r\n        col,\r\n        row,\r\n        shipLength,\r\n        CELL_PER_ROW,\r\n        listOfCells\r\n      )\r\n    ) {\r\n      // console.log(cell)\r\n      for (let i = 0; i < shipLength; i++) {\r\n        const cell = document.querySelector(\r\n          `#cell-${row}-${col + i}.grid-cell-enemy`\r\n        )\r\n        // cell?.classList.remove(\r\n        //   'bg-blue-200',\r\n        //   'rounded-md',\r\n        //   'hover:bg-blue-400',\r\n        //   'hover:cursor-pointer'\r\n        // )\r\n        // cell?.classList.add(`${shipName}-${i}`, ship.classList[7], 'taken')\r\n        // @ts-ignore\r\n        cpuShipLocation[`${row}-${col + i}`] = `${shipName}-${i}`\r\n      }\r\n\r\n      // place the ship on gameboard\r\n      const sh = player2Ships.find((s) => s.name === shipName)\r\n      if (sh) {\r\n        player2GameBoard.placeShipOnGrid(row, col, sh, isHorizontal)\r\n      }\r\n\r\n      playerTwoShipsContainer?.removeChild(ship)\r\n    } else {\r\n      placeCpuShip(ship)\r\n    }\r\n  }\r\n  if (!isHorizontal) {\r\n    for (let i = 0; i < shipLength; i++) {\r\n      const cell = document.querySelector(\r\n        `#cell-${row + i}-${col}.grid-cell-enemy`\r\n      )\r\n      listOfCells.push(cell)\r\n    }\r\n\r\n    if (\r\n      checkIfShipCanBePlaced(\r\n        isHorizontal,\r\n        col,\r\n        row,\r\n        shipLength,\r\n        CELL_PER_ROW,\r\n        listOfCells\r\n      )\r\n    ) {\r\n      // console.log(cell)\r\n      for (let i = 0; i < shipLength; i++) {\r\n        const cell = document.querySelector(\r\n          `#cell-${row + i}-${col}.grid-cell-enemy`\r\n        )\r\n        // cell?.classList.remove(\r\n        //   'bg-blue-200',\r\n        //   'rounded-md',\r\n        //   'hover:bg-blue-400',\r\n        //   'hover:cursor-pointer'\r\n        // )\r\n        // cell?.classList.add(`${shipName}-${i}`, ship.classList[7], 'taken')\r\n        // @ts-ignore\r\n        cpuShipLocation[`${row + i}-${col}`] = `${shipName}-${i}`\r\n      }\r\n      // place the ship on gameboard\r\n      const sh = player2Ships.find((s) => s.name === shipName)\r\n      if (sh) {\r\n        player2GameBoard.placeShipOnGrid(row, col, sh, isHorizontal)\r\n      }\r\n      playerTwoShipsContainer?.removeChild(ship)\r\n    } else {\r\n      placeCpuShip(ship)\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkIfShipCanBePlaced(\r\n  isHorizontal: boolean,\r\n  col: number,\r\n  row: number,\r\n  shipLength: number,\r\n  maxGridSize: number,\r\n  listOfCells: any[]\r\n): boolean {\r\n  if (listOfCells) {\r\n    if (\r\n      listOfCells.some((el: HTMLElement) => el === null) ||\r\n      listOfCells.some((el: HTMLElement) => el.classList.contains('taken'))\r\n    )\r\n      return false\r\n  }\r\n  if (isHorizontal) {\r\n    if (col + (shipLength - 1) > maxGridSize - 1) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  } else {\r\n    if (row + (shipLength - 1) > maxGridSize - 1) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nfunction onShipDragOver(e: any) {\r\n  e.preventDefault()\r\n}\r\n\r\nfunction onShipDragDrop(e: any) {\r\n  // console.log(e.target)\r\n  // Grab row and column of drop location and parse\r\n  const row = +e.target.id.split('-')[1]\r\n  const col = +e.target.id.split('-')[2]\r\n  const listOfCells = []\r\n  // check to see if we can place the ship\r\n  // overflow\r\n  if (isHorizontal) {\r\n    for (let i = 0; i < draggedShipLength; i++) {\r\n      const cell = document.querySelector(\r\n        `#cell-${row}-${col + i}.grid-cell-me`\r\n      )\r\n      listOfCells.push(cell)\r\n    }\r\n    if (\r\n      checkIfShipCanBePlaced(\r\n        isHorizontal,\r\n        col,\r\n        row,\r\n        draggedShipLength,\r\n        CELL_PER_ROW,\r\n        listOfCells\r\n      )\r\n    ) {\r\n      // console.log(cell)\r\n      for (let i = 0; i < draggedShipLength; i++) {\r\n        const cell = document.querySelector(\r\n          `#cell-${row}-${col + i}.grid-cell-me`\r\n        )\r\n        cell?.classList.remove(\r\n          'bg-blue-200',\r\n          'rounded-md',\r\n          'hover:bg-blue-400',\r\n          'hover:cursor-pointer'\r\n        )\r\n        cell?.classList.add(\r\n          `${draggedShipName}-${i}`,\r\n          draggedShip.classList[7],\r\n          'taken'\r\n        )\r\n      }\r\n      // place the ship on gameboard\r\n      const ship = player1Ships.find((s) => s.name === draggedShipName)\r\n      if (ship) {\r\n        player1Gameboard.placeShipOnGrid(row, col, ship, isHorizontal)\r\n      }\r\n      playerOneShipsContainer?.removeChild(draggedShip)\r\n    }\r\n  }\r\n  if (!isHorizontal) {\r\n    for (let i = 0; i < draggedShipLength; i++) {\r\n      const cell = document.querySelector(`#cell-${row + i}-${col}`)\r\n      listOfCells.push(cell)\r\n    }\r\n    if (\r\n      checkIfShipCanBePlaced(\r\n        isHorizontal,\r\n        col,\r\n        row,\r\n        draggedShipLength,\r\n        CELL_PER_ROW,\r\n        listOfCells\r\n      )\r\n    ) {\r\n      for (let i = 0; i < draggedShipLength; i++) {\r\n        const cell = document.querySelector(`#cell-${row + i}-${col}`)\r\n        cell?.classList.remove(\r\n          'bg-blue-200',\r\n          'rounded-md',\r\n          'hover:bg-blue-400',\r\n          'hover:cursor-pointer'\r\n        )\r\n        cell?.classList.add(\r\n          `${draggedShipName}-${i}`,\r\n          draggedShip.classList[7],\r\n          'taken'\r\n        )\r\n      }\r\n      // place the ship on gameboard\r\n      const ship = player1Ships.find((s) => s.name === draggedShipName)\r\n      if (ship) {\r\n        player1Gameboard.placeShipOnGrid(row, col, ship, isHorizontal)\r\n      }\r\n      playerOneShipsContainer?.removeChild(draggedShip)\r\n    }\r\n  }\r\n}\r\n\r\nfunction onShipDragStart(e: any) {\r\n  // @ts-ignore\r\n  draggedShip = e.target\r\n  // @ts-ignore\r\n  draggedShipLength = e.target.childNodes.length\r\n  // @ts-ignore\r\n  draggedShipName = e.target.classList[1].split('-')[0]\r\n}\r\n\r\nfunction rotateShip() {\r\n  const playerOnShips = document.querySelectorAll('.my-ship-container')\r\n  if (isHorizontal) {\r\n    // ship horizontal\r\n    playerOneShipsContainer?.classList.remove('flex-col', 'justify-between')\r\n    playerOneShipsContainer?.classList.add(\r\n      'flex-row',\r\n      'items-start',\r\n      'space-x-3'\r\n    )\r\n    playerOnShips.forEach((ship) => ship.classList.add('flex-col'))\r\n  }\r\n\r\n  if (!isHorizontal) {\r\n    // ship vertical\r\n    playerOneShipsContainer?.classList.remove(\r\n      'flex-row',\r\n      'items-start',\r\n      'space-x-3'\r\n    )\r\n    playerOneShipsContainer?.classList.add('flex-col', 'justify-between')\r\n    playerOnShips.forEach((ship) => ship.classList.remove('flex-col'))\r\n  }\r\n  isHorizontal = !isHorizontal\r\n}\r\n\r\nfunction createHtmlShip(\r\n  name: string,\r\n  length: number,\r\n  isEnemy: boolean\r\n): HTMLElement {\r\n  const shipContainer = createHtmlShipContainer(name, length, isEnemy)\r\n  // add the to player one ships container\r\n  for (let i = 0; i < length; i++) {\r\n    const shipCell = createHtmlShipCell(name, i, isEnemy)\r\n    shipContainer.appendChild(shipCell)\r\n  }\r\n  return shipContainer\r\n}\r\n\r\nfunction createHtmlShipContainer(\r\n  name: string,\r\n  length: number,\r\n  isEnemy: boolean\r\n): HTMLElement {\r\n  const shipContainer = document.createElement('div')\r\n  shipContainer.classList.add(\r\n    'ship-container',\r\n    `${name}-container`,\r\n    isEnemy ? `enemy-ship-container` : `my-ship-container`,\r\n    'flex',\r\n    'flex-row',\r\n    'rounded-md',\r\n    'max-w-min'\r\n  )\r\n\r\n  if (!isEnemy) {\r\n    shipContainer.setAttribute('draggable', 'true')\r\n  }\r\n\r\n  return shipContainer\r\n}\r\n\r\nfunction createHtmlShipCell(\r\n  name: string,\r\n  cellNum: number,\r\n  isEnemy: boolean\r\n): HTMLElement {\r\n  const shipCell = document.createElement('div')\r\n  shipCell.id = `${name}-${cellNum}`\r\n  shipCell.classList.add(\r\n    'ship-cell',\r\n    `ship-${name}-cell`,\r\n    isEnemy ? 'enemy-ship-cell' : 'my-ship-cell',\r\n    'w-6',\r\n    'h-6',\r\n    'flex',\r\n    'flex-row',\r\n    'items-center',\r\n    'justify-center'\r\n  )\r\n\r\n  return shipCell\r\n}\r\n\r\nfunction createHtmlGrid(\r\n  maxRow: number,\r\n  maxCell: number,\r\n  isEnemygrid: boolean\r\n): HTMLElement {\r\n  const grid = document.createElement('grid')\r\n  grid.classList.add(\r\n    'gameboard',\r\n    'gameboard-grid',\r\n    isEnemygrid ? 'gameboard-grid-enemy' : 'gameboard-grid-me',\r\n    'flex',\r\n    'flex-col',\r\n    'bg-indigo-700'\r\n  )\r\n\r\n  for (let nbrRow = 0; nbrRow < maxRow; nbrRow++) {\r\n    const r = createHtmlRow(nbrRow, isEnemygrid)\r\n    for (let nbrCell = 0; nbrCell < maxCell; nbrCell++) {\r\n      const c = createHtmlGridCell(nbrRow, nbrCell, isEnemygrid)\r\n      r.appendChild(c)\r\n    }\r\n    grid.appendChild(r)\r\n  }\r\n\r\n  return grid\r\n}\r\n\r\nfunction createHtmlRow(rowNumber: number, isEnemyRow: boolean): HTMLElement {\r\n  const row = document.createElement('div')\r\n  row.setAttribute('id', `row-${rowNumber}`)\r\n  row.classList.add(\r\n    'grid-row',\r\n    isEnemyRow ? 'grid-row-enemy' : 'grid-row-me',\r\n    'flex',\r\n    'flex-row'\r\n  )\r\n\r\n  return row\r\n}\r\n\r\nfunction createHtmlGridCell(\r\n  row: number,\r\n  col: number,\r\n  isEnemyCell: boolean\r\n): HTMLElement {\r\n  const cell = document.createElement('div')\r\n  cell.setAttribute('id', `cell-${row}-${col}`)\r\n\r\n  cell.classList.add(\r\n    'grid-cell',\r\n    isEnemyCell ? 'grid-cell-enemy' : 'grid-cell-me',\r\n    'w-6',\r\n    'h-6',\r\n    'bg-blue-200',\r\n    'rounded-md',\r\n    'hover:bg-blue-400',\r\n    'hover:cursor-pointer'\r\n  )\r\n  return cell\r\n}\r\n\r\n// Load the background versus image\r\nfunction loadImage() {\r\n  const imgUIContainer = document.querySelector('.image-container>img')\r\n  imgUIContainer?.setAttribute('alt', 'Player versus Player')\r\n  imgUIContainer?.setAttribute('src', ImageVsWhite)\r\n  imgUIContainer?.classList.add('w-full', 'h-auto')\r\n  // imgUIContainer?.appendChild(imgEl)\r\n}\r\n","const createArrayOfString = function (\r\n  length: number,\r\n  element?: string\r\n): Array<any> {\r\n  if (!length || typeof length !== 'number') {\r\n    throw new Error('Length is required and must be a number')\r\n  }\r\n  if (length <= 0) {\r\n    throw new Error('Length must be bigger than 0')\r\n  }\r\n\r\n  let a = []\r\n  for (let i = 0; i < length; i++) {\r\n    if (element) {\r\n      a.push(`${element}-${i}`)\r\n    } else {\r\n      a.push(undefined)\r\n    }\r\n  }\r\n  return a\r\n}\r\n\r\n// return an array of array\r\n// (2,2) => [[undefined, undefined],[undefined,undefined]]\r\nconst createArrayOfArray = (\r\n  row: number = 10,\r\n  col: number = 10,\r\n  element: any = undefined\r\n) => {\r\n  let grid = []\r\n\r\n  if (row <= 0) {\r\n    row = 10\r\n  }\r\n\r\n  if (col <= 0) {\r\n    col = 10\r\n  }\r\n\r\n  for (let i = 0; i < row; i++) {\r\n    let r = []\r\n    for (let j = 0; j < col; j++) {\r\n      r.push(element)\r\n    }\r\n\r\n    grid.push(r)\r\n  }\r\n\r\n  return grid\r\n}\r\n\r\nfunction generateRandomNum(max: number): number {\r\n  return Math.floor(Math.random() * max)\r\n}\r\n\r\nexport { createArrayOfString, createArrayOfArray, generateRandomNum }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["row","col","grid","createArrayOfArray","ships","placeShipOnGrid","ship","isHorizontal","length","Error","shipLength","nextCellsGrid","i","push","every","nxtCell","canShipBePlaced","name","receiveAttack","undefined","shipWithIndex","shipName","split","shipHitPosition","find","s","hit","doesAllShipsHaveSunk","sh","isSunk","listAttack","generateCpuAttackLocation","max","generateRandomNum","attack","gameboard","randomAttack","trim","body","createArrayOfString","toLocaleLowerCase","position","this","el","CELL_PER_ROW","NBR_ROW","NBR_SHIPS","SHIPS_NAME","BG_SHIP","playerOneName","document","querySelector","playerOneLives","playerOneGridContainer","btnRotate","playerOneShipsContainer","whoseTurn","btnStart","btnReset","playerTwoName","playerTwoLives","enemyGridContainer","playerTwoShipsContainer","myHtmlGridEl","enemyHtmlGridEl","draggedShip","draggedShipName","draggedShipLength","cpuShipLocation","player1","player2","player1Gameboard","player2GameBoard","winner","player1Ships","player2Ships","isGameOver","currentPlayer","checkForWins","reduceLife","isEnemy","totalP1","totalP2","textContent","revealGridCell","gb","cell","htmlCell","playerPlay","e","target","id","playGame","alert","querySelectorAll","forEach","addEventListener","cpuListAttack","Object","keys","computerPlay","startGame","childNodes","resetGame","location","reload","generateCpuLocation","placeCpuShip","classList","listOfCells","checkIfShipCanBePlaced","removeChild","maxGridSize","some","contains","onShipDragOver","preventDefault","onShipDragDrop","remove","add","onShipDragStart","rotateShip","playerOnShips","createHtmlShip","shipContainer","createElement","setAttribute","createHtmlShipContainer","shipCell","createHtmlShipCell","appendChild","cellNum","createHtmlGrid","maxRow","maxCell","isEnemygrid","nbrRow","r","createHtmlRow","nbrCell","c","createHtmlGridCell","rowNumber","isEnemyRow","isEnemyCell","imgUIContainer","loadImage","gridCell","setTimeout","element","a","j","Math","floor","random","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","g","globalThis","Function","window","Symbol","toStringTag","defineProperty","value","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","replace","p"],"sourceRoot":""}